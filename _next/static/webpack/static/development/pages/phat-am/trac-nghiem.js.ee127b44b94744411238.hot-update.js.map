{"version":3,"file":"static/webpack/static/development/pages/phat-am/trac-nghiem.js.ee127b44b94744411238.hot-update.js","sources":["webpack:///./components/hoctaphieuan/QuizComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {removeVietnameseTones, soundDung, soundSai} from './constantsPhatAm';\n\n\nconst QuizComponent = ({ exercises }) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [correctCount, setCorrectCount] = useState(0); // Track the number of correct answers\n\n  const [audio, setAudio] = useState(null);\n\n  useEffect(() => {\n    setCurrentIndex(0);\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n    setCorrectCount(0);\n  }, [exercises]);\n  \n  useEffect(() => {\n    // Initialize Audio only for exercises with mp3\n    if (exercises[currentIndex].mp3) {\n      const currentAudio = new Audio(exercises[currentIndex].mp3);\n      setAudio(currentAudio);\n      // Play the audio as soon as the question is changed or first loaded\n      currentAudio.play();\n\n      // Cleanup audio when the component is unmounted or when currentIndex changes\n      return () => {\n        currentAudio.pause();\n      };\n    } else {\n      setAudio(null); // No audio for this exercise\n    }\n  }, [currentIndex, exercises]);\n\n  useEffect(() => {\n    // Reset state when the question changes\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n  }, [currentIndex]);\n\n  const handlePlayAudio = () => {\n    if (audio) {\n      audio.play();\n    }\n  };\n\n  const handleAnswerSelection = (answer) => {\n    setSelectedAnswer(answer);\n    setIsAnswered(true);\n\n    // Check if the selected answer is correct\n    const correctAnswer = exercises[currentIndex].correctAnswer;\n    if (answer === correctAnswer) {\n      setCorrectCount(correctCount + 1);\n      // Play a random sound for correct answer\n      const randomCorrectSound = soundDung[Math.floor(Math.random() * soundDung.length)];\n      new Audio(randomCorrectSound).play();\n    } else {\n      // Play a random sound for incorrect answer\n      const randomIncorrectSound = soundSai[Math.floor(Math.random() * soundSai.length)];\n      new Audio(randomIncorrectSound).play();\n    \n    }\n  };\n\n  const handleNext = () => {\n    if (currentIndex < exercises.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentIndex > 0) {\n      setCurrentIndex(currentIndex - 1);\n    }\n  };\n\n  const { choices, correctAnswer, question } = exercises[currentIndex];\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif', maxWidth: '600px', margin: 'auto' }}>\n      <h2 style={{ color: '#007BFF', fontSize: '28px', textAlign: 'center' }}>\n        {question ? question : 'Hãy chọn từ bạn nghe thấy'}\n      </h2>\n      {/* Display MP3 play button if exercise has audio */}\n      {exercises[currentIndex].mp3 && (\n        <div className='divRow'>\n          <button\n            onClick={handlePlayAudio}\n            style={{\n              padding: '12px 25px',\n              backgroundColor: '#007BFF',\n              color: '#fff',\n              borderRadius: '10px',\n              border: 'none',\n              fontSize: '16px',\n              cursor: 'pointer',\n              display: 'block',\n              margin: '20px auto',\n            }}\n          >\n          ▶️ Phát âm\n          </button>\n        </div>\n      )}\n\n      {/* Display choices if it's a multiple choice question */}\n      {choices && (\n        <div style={{ marginTop: '20px', textAlign: 'center' }}>\n          {choices.map((choice, index) => (\n            <button\n              key={choice}\n              onClick={() => handleAnswerSelection(choice)}\n              disabled={isAnswered}\n              style={{\n                padding: '10px 20px',\n                margin: '10px',\n                backgroundColor: selectedAnswer === choice ? (choice === correctAnswer ? 'green' : 'red') : '#f0f0f0',\n                color: selectedAnswer === choice ? 'white' : 'black',\n                borderRadius: '8px',\n                cursor: 'pointer',\n                fontSize: '16px',\n                border: 'none',\n              }}\n            >\n              {choice}\n            </button>\n          ))}\n        </div>\n      )}\n\n      {/* Show the correct answer for question type exercises */}\n      {question && isAnswered && (\n        <div style={{ marginTop: '20px', textAlign: 'center' }}>\n          <strong style={{ color: selectedAnswer === correctAnswer ? 'green' : 'red' }}>\n            {selectedAnswer === correctAnswer ? `Đúng! Câu trả lời là: ${correctAnswer}` : `Sai! Câu trả lời đúng là: ${correctAnswer}`}\n          </strong>\n        </div>\n      )}\n\n      <div style={{ marginTop: '20px', textAlign: 'center' }}>\n        <strong>Câu trả lời đúng: {correctCount}</strong>\n      </div>\n\n      <div style={{ marginTop: '20px', textAlign: 'center' }}>\n        <button\n          onClick={handlePrevious}\n          disabled={currentIndex === 0}\n          style={{ padding: '10px 20px', marginRight: '10px', backgroundColor: '#ccc', borderRadius: '5px' }}\n        >\n          ◀️ Trước\n        </button>\n        <button\n          onClick={handleNext}\n          disabled={currentIndex === exercises.length - 1}\n          style={{ padding: '10px 20px', backgroundColor: '#ccc', borderRadius: '5px' }}\n        >\n          Sau ▶️\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuizComponent;\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1EA;AAAA;AAAA;AAAA;AA6EA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAqBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAJA;AADA;AAwBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAUA;AACA;AACA;;;;A","sourceRoot":""}